import numpy as np
from hmmlearn import hmm
from sklearn_crfsuite import CRF
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.preprocessing import LabelEncoder

X = [['walk', 'in', 'the', 'park'],
     ['eat', 'apple'],
     ['eat', 'apple', 'in', 'the', 'morning']]
y = [['V', 'P', 'D', 'N'],
     ['V', 'N'],
     ['V', 'N', 'P', 'D', 'N']]
label_encoder = LabelEncoder()
X_encoded = [label_encoder.fit_transform(seq) for seq in X]

X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=42)
X_train_flattened = np.concatenate(X_train)
y_train_flattened = np.concatenate(y_train)
hmm_model = hmm.MultinomialHMM(n_components=3)
lengths_train = [len(seq) for seq in X_train]
hmm_model.fit(np.atleast_2d(X_train_flattened).T, lengths=lengths_train)
hmm_pred = []
for seq in X_test:
    seq_flattened = np.array(seq).reshape(-1, 1)
    predicted_states = hmm_model.predict(seq_flattened)
    predicted_labels = label_encoder.inverse_transform(predicted_states)
    hmm_pred.append(predicted_labels)
hmm_pred_flat = [item for sublist in hmm_pred for item in sublist]
y_test_flat = [item for sublist in y_test for item in sublist]
print("HMM Results:")
print(classification_report(y_test_flat, hmm_pred_flat))
crf_model = CRF()
crf_model.fit(X_train, y_train)
crf_pred = crf_model.predict(X_test)
crf_pred_flat = [item for sublist in crf_pred for item in sublist]
y_test_flat = y_test_flat[:len(crf_pred_flat)]
print("\nCRF Results:")
print(classification_report(y_test_flat, crf_pred_flat))
